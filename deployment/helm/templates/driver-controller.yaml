{{- if .Values.driverController.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: akri-driver-controller-deployment
  labels: {{- include "akri.labels" . | nindent 4 }}
    app.kubernetes.io/name: akri-driver-controller
    app.kubernetes.io/component: driver-controller
spec:
  replicas: 1
  selector:
    matchLabels: {{- include "akri.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/name: akri-driver-controller
  template:
    metadata:
      labels: {{- include "akri.labels" . | nindent 8 }}
        app.kubernetes.io/name: akri-driver-controller
        app.kubernetes.io/component: driver-controller
    spec:
      {{- if .Values.rbac.enabled }}
      serviceAccountName: 'akri-driver-controller-sa'
      {{- end }}
      containers:
      - name: akri-driver-controller
        {{- if .Values.useDevelopmentContainers }}
        {{- if .Values.useLatestContainers }}
        image: {{ printf "%s:%s" .Values.driverController.image.repository (default "latest-dev" .Values.driverController.image.tag) | quote }}
        {{- else }}
        image: {{ printf "%s:%s" .Values.driverController.image.repository (default (printf "v%s-dev" .Chart.AppVersion) .Values.driverController.image.tag) | quote }}
        {{- end }}
        {{- else }}
        {{- if .Values.useLatestContainers }}
        image: {{ printf "%s:%s" .Values.driverController.image.repository (default "latest" .Values.driverController.image.tag) | quote }}
        {{- else }}
        image: {{ printf "%s:%s" .Values.driverController.image.repository (default (printf "v%s" .Chart.AppVersion) .Values.driverController.image.tag) | quote }}
        {{- end }}
        {{- end }}
        {{- with .Values.driverController.image.pullPolicy }}
        imagePullPolicy: {{ . }}
        {{- end }}
        {{- if .Values.driverController.securityContext }}
        securityContext:
        {{- toYaml .Values.driverController.securityContext | nindent 10 }}
        {{- end}}
        resources:
          requests:
            memory: {{ .Values.driverController.resources.memoryRequest }}
            cpu: {{ .Values.driverController.resources.cpuRequest }}
          limits:
            memory: {{ .Values.driverController.resources.memoryLimit }}
            cpu: {{ .Values.driverController.resources.cpuLimit }}
        {{- if .Values.prometheus.enabled }}
        ports:
          - name: {{ .Values.prometheus.portName | quote }}
            containerPort: {{ .Values.prometheus.port }}
        {{- end }}
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if .Values.driverController.allowOnControlPlane }}
      tolerations:
        {{- /* Allow this pod to run on the master. */}}
        - key: node-role.kubernetes.io/master
          effect: NoSchedule
      {{- end }}
      nodeSelector:
        {{- if .Values.driverController.onlyOnControlPlane }}
        node-role.kubernetes.io/master: ""
        {{- end }}
        "kubernetes.io/os": linux
        {{- if .Values.driverController.nodeSelectors }}
          {{- toYaml .Values.driverController.nodeSelectors | nindent 8 }}
        {{- end }}
{{- end }}
